name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-macos:
    name: Build for macos
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2.1.6
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Setup Xcode
      #   run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/

      - name: Install rust target
        run: rustup target add aarch64-apple-darwin

      - name: Build x86-64
        run: cargo build --release

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-x86_64
          path: crates/native/index.node

      # - name: Build aarch64
      #   run: SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path) \
      #     MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version) \
      #     cargo build --release --target=aarch64-apple-darwin
      #
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ runner.os }}-aarch64
      #     path: crates/native/index.node

  build-linux:
    name: Build for linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Installing needed Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          sudo apt-get install -y libx11-dev

      - uses: actions/cache@v2.1.6
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Install rust target
      #   run: rustup target add aarch64-unknown-linux-gnu

      - name: Build x86-64
        run: cargo build --release

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-x86_64
          path: crates/native/index.node

      # - name: Build aarch64
      #   run: cargo build --release --target=aarch64-unknown-linux-gnu
      #
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ runner.os }}-aarch64
      #     path: crates/native/index.node

  build-windows:
    name: Build for windows
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1.4.0
        with:
          version: "11"
          directory: ${{ runner.temp }}/llvm

      - uses: actions/cache@v2.1.6
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust target
        run: rustup target add aarch64-pc-windows-msvc

      - name: Build x86-64
        run: cargo build --release
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm/bin

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-x86_64
          path: crates/native/index.node

      - name: Build aarch64
        run: cargo build --release --target aarch64-pc-windows-msvc
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm/bin

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-aarch64
          path: crates/native/index.node

  release:
    runs-on: ubuntu-latest
    name: Release
    needs: [build-macos, build-linux, build-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: download build
        uses: actions/download-artifact@v2
        with:
          path: .artifact

      - name: Copy file
        run: |
          mkdir -p build
          cp .artifact/Windows-aarch64/index.node build/win32-arm64.node
          cp .artifact/macOS-x86_64/index.node    build/darwin-x86.node
          cp .artifact/Linux-x86_64/index.node    build/linux-x86.node
          cp .artifact/Windows-x86_64/index.node  build/win32-x86.node

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2.1.6
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v2.1.6
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasi
        run: wasm-pack build crates/wasi/ --out-dir ../../packages/wasi --out-name index

      - name: Package
        run: |
          yarn
          yarn dlx vsce package
          echo "VSIX_PATH=$(find . -maxdepth 1 -type f -iname "*.vsix" | head -1)" >> $GITHUB_ENV
          echo "VSIX_NAME=$(basename $(find . -maxdepth 1 -type f -iname "*.vsix" | head -1))" >> $GITHUB_ENV

      - name: Publish to Visual Studio Marketplace
        run: yarn dlx vsce publish --packagePath ${{ env.VSIX_PATH }} -p ${{ secrets.VSCE_TOKEN }}

      - name: Publish to Open VSX Registry
        run: yarn dlx ovsx publish ${{ env.VSIX_PATH }} -p ${{ secrets.OVSX_TOKEN }}

      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: See [CHANGE LOG](https://github.com/YXL76/cloudmusic-vscode/blob/master/CHANGELOG.md) for details.
          draft: false
          prerelease: false

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.VSIX_PATH }}
          asset_name: ${{ env.VSIX_NAME }}
          asset_content_type: application/zip
